@using Protos;
@using Grpc.Net.Client;
@page "/"

<PageTitle>Index</PageTitle>
<label>Indtast Cpr nummer:</label>
@if (alert)
{
    <h1>Din puls er udenfor de normale værdier, personalet er undervejs!</h1>
}

<input placeholder="Indtast Cpr" class="form-control" @bind-value="cpr" />
<button class="btn btn-primary align-content-center float-center" @onclick="@(g => OnClick_AskForHelp())">Hjælp</button>
@if (!isStarted)
{
    <button class="btn btn-primary align-content-center float-center" @onclick="@(g => OnClick_StartSendInfo())">Start</button>
}
else{
    <button class="btn btn-primary align-content-center float-center" @onclick="@(g => OnClick_StopSendInfo())">Stop</button>
}
<br />
<label>@heartRate</label>


@code {
    public bool alert;
    public string cpr = "";
    public bool isStarted = false;
    public int heartRate = new();
    public Random rnd = new();
    private Response helpResponse = new();
    private IsNominalResponse heartRateResponse = new();
    string serveraddress = "https://localhost:7143/";
    protected async Task OnClick_AskForHelp()
    {
        using var channel = GrpcChannel.ForAddress(serveraddress, new GrpcChannelOptions
    {
        HttpHandler = new GrpcWebHandler(new HttpClientHandler())
    });
        var client = new Protos.Patient.PatientClient(channel);
        helpResponse = await client.AskForHelpAsync(
                          new Protos.HelpRequest { Cpr = cpr });

        var test = 0;
    }
    protected async Task OnClick_StartSendInfo()
    {
        isStarted = true;
        using var channel = GrpcChannel.ForAddress(serveraddress, new GrpcChannelOptions
            {
                HttpHandler = new GrpcWebHandler(new HttpClientHandler())
            });
        var client = new Protos.Patient.PatientClient(channel);
        while(isStarted){

            heartRateResponse = await client.SendInfoAsync(
                              new Protos.CprHeartRate { Cpr = cpr, Heartrate = await GetHeartRate() });
            if (!heartRateResponse.IsNominal)
            {
                StateHasChanged();
                alert = true;
                break;
            }
            await Task.Delay(5000);
            var test1 = 0;
            StateHasChanged();
        }


        var test = 0;
    }

    protected async void OnClick_StopSendInfo()
    {

        isStarted = false;
        StateHasChanged();

    }
    protected async Task<int> GetHeartRate(){
        
        await Task.Run(() =>
        {
            heartRate = rnd.Next(58, 142);
        });
        return heartRate;
    }
    
}